# What is the global section?
# The global section is the first part of an HAProxy configuration file.
# It defines settings that apply to the entire HAProxy process, not just one frontend or backend.
# Think of it like the “master settings” for HAProxy — controlling how it runs on your server.

# | Directive        | Meaning                                                          | Example                                                     |
# | ---------------- | ---------------------------------------------------------------- | ----------------------------------------------------------- |
# | `log`            | Defines where to send logs (like to syslog or a file).           | `log /dev/log local0`                                       |
# | `chroot`         | Restricts HAProxy’s access to a specific directory for security. | `chroot /var/lib/haproxy`                                   |
# | `pidfile`        | Stores the process ID (used for restarts or monitoring).         | `pidfile /var/run/haproxy.pid`                              |
# | `maxconn`        | Limits the total number of simultaneous connections.             | `maxconn 2000`                                              |
# | `user` / `group` | Specifies the Linux user and group HAProxy runs as.              | `user haproxy` / `group haproxy`                            |
# | `daemon`         | Runs HAProxy as a background service.                            | `daemon`                                                    |
# | `stats socket`   | Enables a control socket (used for monitoring or admin tools).   | `stats socket /run/haproxy/admin.sock mode 660 level admin` |
# | `nbthread`       | Number of threads HAProxy will use (for multi-core CPUs).        | `nbthread 4`                                                |

global
# process-level settings go here
    # maxconn = Maximum number of concurrent (simultaneous) connections HAProxy will handle.
    # You can think of it like a capacity limit — how many users or streams HAProxy can handle at once.
    # If the limit is reached, new connections will wait (in queue) until some existing ones finish.
    # Where it can be used
    # | Location                                      | What it controls                                                      |
    # | --------------------------------------------- | --------------------------------------------------------------------- |
    # | **`global`**                                  | The total connections HAProxy process can handle.                     |
    # | **`defaults`**, **`frontend`**, **`backend`** | The max connections for that specific section (per frontend/backend). |
    # in the global section
        # maxconn 60000 -> HAProxy will accept up to 60000 concurrent connections in total. If more clients try to connect, new ones will have to wait or be rejected depending on the queue settings.
    maxconn 60000

    # What the log directive does
    # The log directive tells HAProxy where to send log messages and what kind of messages to send.
    # It’s used inside the global section (for the whole process) or inside defaults, frontend, or backend (for specific parts).
    # Basic syntax
    # log <address> <facility> [<level> [<minlevel>]]
    # | Part         | Meaning                                                  | Example                                     |
    # | ------------ | -------------------------------------------------------- | ------------------------------------------- |
    # | `<address>`  | Where logs are sent (like `/dev/log` or `127.0.0.1:514`) | `/dev/log`                                  |
    # | `<facility>` | Log “category” for syslog                                | `local0`, `local1`, etc.                    |
    # | `<level>`    | Maximum log level to send                                | `info`, `notice`, `warning`, `err`, `debug` |
    # | `<minlevel>` | (Optional) Minimum log level                             | `debug`                                     |
    # Most common setup
        # log /dev/log local0
        # log /dev/log local1 notice
    # log /dev/log local0 → sends all logs to the local system logger using “facility” local0.
    # log /dev/log local1 notice → sends only messages notice or more severe to local1.
    # Log levels (from most → least severe)
    # | Level     | Description                        |
    # | --------- | ---------------------------------- |
    # | `emerg`   | System unusable (e.g., crash)      |
    # | `alert`   | Action must be taken immediately   |
    # | `crit`    | Critical conditions                |
    # | `err`     | Error conditions                   |
    # | `warning` | Warning messages                   |
    # | `notice`  | Normal but significant events      |
    # | `info`    | Informational messages             |
    # | `debug`   | Debugging messages (very detailed) |
    # example: log /dev/log local0 info
    # Send logs to a remote syslog server
    # example: log 192.168.1.10:514 local0 info
    log /dev/log local0
    log /dev/log local1 notice

    # What is user?
    # The user directive specifies which Linux user HAProxy will run as after starting.
    # By default, HAProxy starts as root (so it can bind to ports <1024 like 80 or 443). But running continuously as root is risky for security.
    # So after binding to the necessary ports, HAProxy can drop privileges and run as a safer user. Think of it as telling HAProxy: “Start as root to grab ports, then act as this user for safety.”.
    # user haproxy → run as Linux user haproxy
    # group haproxy → run as group haproxy
    # Why it matters
    # Security -> Running as a normal user prevents HAProxy from modifying critical system files if compromised.
    # File permissions -> The HAProxy process will only be able to read/write files accessible to this user (logs, stats socket, etc.).
    user haproxy
    group haproxy

    # What is chroot?
    # chroot stands for “change root”.
    # It tells HAProxy to run in a specific directory as its root, instead of the actual system root /. Think of it like putting HAProxy in a sandbox — it can only see and access files inside that folder.
    # Purpose: Security — if HAProxy is compromised, the attacker can’t access system files outside the sandbox.
    # HAProxy will see /var/lib/haproxy as /
    # Any file paths in HAProxy must now be relative to this directory.
    chroot /var/lib/haproxy

# What is the defaults section?
# The defaults section sets default settings for all frontends and backends unless you override them individually.
# Think of it as the base configuration for your traffic handling — you don’t have to repeat the same settings in every frontend/backend.
# In short: “If a frontend or backend doesn’t specify a value, it uses the defaults.”
# | Directive                | Meaning                                                   |
# | ------------------------ | --------------------------------------------------------- |
# | `log global`             | Use the log settings from the `global` section            |
# | `mode http`              | Default mode for frontends/backends (`http` or `tcp`)     |
# | `option httplog`         | Enables detailed HTTP request logging                     |
# | `option dontlognull`     | Don’t log connections with no data (like failed connects) |
# | `retries 3`              | Retry a server up to 3 times if it fails                  |
# | `timeout connect 5000ms` | Max time to establish a connection to a server            |
# | `timeout client 50000ms` | Max inactivity time for the client connection             |
# | `timeout server 50000ms` | Max inactivity time for the server connection             |

defaults
# default settings go here
    log global

    # What is mode?
    # The mode directive tells HAProxy how to handle traffic: whether it should treat it as HTTP traffic or raw TCP traffic. It defines HAProxy’s processing behavior for that section.
    # | Mode     | What it does                                                                                                  | Use case                                |
    # | -------- | ------------------------------------------------------------------------------------------------------------- | --------------------------------------- |
    # | `http`   | HAProxy parses HTTP headers and can do HTTP-specific features like routing, header manipulation, and logging. | Web servers, APIs, websites             |
    # | `tcp`    | HAProxy treats traffic as raw TCP. It doesn’t inspect or change the data.                                     | Databases, streaming, RTMP, raw sockets |
    # | `health` | (Less common) For health checks.                                                                              | Internal health checks                  |

    mode tcp
    # mode http

    option httplog
    option dontlognull
    retries 3
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

    # What is balance?
    # The balance directive tells HAProxy how to distribute incoming traffic across backend servers. In simple words: it defines the algorithm HAProxy uses to pick a server for each client request.
    # | Algorithm       | How it works                                                                             | Use case                                                     |
    # | --------------- | ---------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
    # | `roundrobin`    | Sends each new request to the next server in order, looping back to the first.           | Simple, even distribution                                    |
    # | `leastconn`     | Sends traffic to the server with the fewest active connections.                          | Best for long-lived connections (e.g., streaming, WebSocket) |
    # | `source`        | Chooses the server based on client IP hash (same client always goes to the same server). | Session persistence / sticky sessions                        |
    # | `uri`           | Uses a hash of the URL path to pick a server.                                            | Content-based routing                                        |
    # | `hdr(<header>)` | Uses a hash of a specific HTTP header to pick a server.                                  | Advanced routing based on headers                            |

    balance roundrobin

# What is a frontend?
# A frontend defines how HAProxy receives client connections.
# It handles:
# Ports (like 80, 443, or 1935)
# Protocols (HTTP, TCP)
# Routing rules (which backend to send traffic to)
# Connection limits and options
# Think of it as the “reception desk” for incoming traffic.
# bind <ip>:<port>
# mode <http|tcp>
# default_backend <backend_name>
# bind *:80 -> bind *:80 → HAProxy listens on all IPs, port 80
# mode http -> mode http → HAProxy understands HTTP traffic
# default_backend web_servers -> default_backend web_servers → All traffic is sent to the web_servers backend
# | Directive         | Meaning                                                     |
# | ----------------- | ----------------------------------------------------------- |
# | `bind`            | The IP and port HAProxy listens on                          |
# | `mode`            | How traffic is handled (`http` or `tcp`)                    |
# | `default_backend` | Which backend to send traffic to if no rules match          |
# | `acl`             | Access Control List — conditional rules to route traffic    |
# | `use_backend`     | Send traffic to a different backend based on ACL conditions |
# | `maxconn`         | Maximum concurrent connections for this frontend            |

frontend
# a frontend that accepts requests from clients
    bind *:80
    mode http

# What is a backend?
# A backend defines a group of real servers (also called pool servers) that handle client requests.
# Frontends receive the traffic, backends serve the traffic.
# You can have multiple backends for different purposes (HTTP, TCP, streaming, APIs).
# Think of it as the team of servers that HAProxy distributes requests to.
# | Option                  | Meaning                                           |
# | ----------------------- | ------------------------------------------------- |
# | `check`                 | Enable health checks on this server               |
# | `maxconn <n>`           | Max simultaneous connections to this server       |
# | `weight <n>`            | Weight for load balancing (higher = more traffic) |
# | `backup`                | This server is only used if others fail           |
# | `rise <n>` / `fall <n>` | Number of checks to mark server up/down           |
# | `inter <ms>`            | Health check interval in milliseconds             |

backend
# servers that fulfill the requests